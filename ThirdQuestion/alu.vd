$date
	Mon Jan 18 23:41:17 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module My_ALU_TestBench $end
$var wire 8 ! S [7:0] $end
$var reg 8 " A [7:0] $end
$var reg 8 # B [7:0] $end
$var reg 2 $ sel [1:0] $end
$scope module my_ALU $end
$var wire 8 % A [7:0] $end
$var wire 8 & B [7:0] $end
$var wire 2 ' sel [1:0] $end
$var wire 8 ( f3 [7:0] $end
$var wire 8 ) f2 [7:0] $end
$var wire 8 * f1 [7:0] $end
$var wire 8 + f0 [7:0] $end
$var wire 8 , S [7:0] $end
$scope module FunctionOne $end
$var wire 8 - A [7:0] $end
$var wire 8 . B [7:0] $end
$var wire 8 / S [7:0] $end
$upscope $end
$scope module functionThree $end
$var wire 8 0 A [7:0] $end
$var wire 8 1 B [7:0] $end
$var wire 8 2 tmp [7:0] $end
$var wire 8 3 S [7:0] $end
$scope module absoluteValue $end
$var wire 8 4 S [7:0] $end
$var wire 8 5 A [7:0] $end
$upscope $end
$scope module threeTimesAMinusB $end
$var wire 8 6 A [7:0] $end
$var wire 8 7 B [7:0] $end
$var wire 8 8 S [7:0] $end
$upscope $end
$upscope $end
$scope module functionTwo $end
$var wire 8 9 B [7:0] $end
$var wire 8 : S [7:0] $end
$upscope $end
$scope module functionZero $end
$var wire 8 ; A [7:0] $end
$var wire 8 < B [7:0] $end
$var wire 8 = S [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11100100 =
b10000000 <
b1 ;
b10000000 :
b10000000 9
b10000011 8
b10000000 7
b1 6
b10000011 5
b1111101 4
b1111101 3
b10000011 2
b10000000 1
b1 0
b1 /
b10000000 .
b1 -
b11100100 ,
b11100100 +
b1 *
b10000000 )
b1111101 (
b0 '
b10000000 &
b1 %
b0 $
b10000000 #
b1 "
b11100100 !
$end
#20
b11 !
b11 ,
b10 (
b10 3
b10 4
b100 +
b100 =
b1 $
b1 '
b11 *
b11 /
b10 2
b10 5
b10 8
b11111111 )
b11111111 :
b1 #
b1 &
b1 .
b1 1
b1 7
b1 9
b1 <
#40
b1 !
b1 ,
b100 (
b100 3
b100 4
b11 +
b11 =
b10 $
b10 '
b11111111 *
b11111111 /
b100 2
b100 5
b100 8
b1 )
b1 :
b11111111 #
b11111111 &
b11111111 .
b11111111 1
b11111111 7
b11111111 9
b11111111 <
#60
b11111111 !
b11111111 ,
b10 (
b10 3
b10 4
b100 +
b100 =
b11 *
b11 /
b10 2
b10 5
b10 8
b11111111 )
b11111111 :
b1 #
b1 &
b1 .
b1 1
b1 7
b1 9
b1 <
#80
b10 !
b10 ,
b11 $
b11 '
#100
b101 !
b101 ,
b101 (
b101 3
b101 4
b110 +
b110 =
b10001 *
b10001 /
b11111011 2
b11111011 5
b11111011 8
b11111000 )
b11111000 :
b1000 #
b1000 &
b1000 .
b1000 1
b1000 7
b1000 9
b1000 <
#120
